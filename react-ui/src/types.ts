/*
 Generated by typeshare 1.13.2
*/

export type NanoId = string;

export interface ApiError {
	message: string;
	origin: string;
}

export enum LicenceTier {
	Pro = "Pro",
	Free = "Free",
	None = "None",
}

export interface AppSettings {
	show_tray_icon: boolean;
	email: string;
	licence_key: string;
	machine_id: string;
	licence_tier: LicenceTier;
}

export interface AppUiState {
	app_settings: AppSettings;
	messages: string[];
}

export interface CheckLicenceRequest {
	email: string;
	licence_key: string;
}

export interface CreateCheckoutSessionResponse {
	checkout_session_url: string;
}

export enum Level {
	AlwaysOnTop = "alwaysontop",
	Normal = "normal",
	AlwaysOnBottom = "alwaysonbottom",
}

export type Modifier = 
	| { type: "scrape", content: {
	modifier_id: NanoId;
	selector: string;
}}
	| { type: "refresh", content: {
	modifier_id: NanoId;
	interval_sec: number;
}};

export interface WidgetBounds {
	x: number;
	y: number;
	width: number;
	height: number;
}

export interface CreateWidgetRequest {
	url?: string;
	html?: string;
	title?: string;
	level: Level;
	transparent: boolean;
	decorations: boolean;
	modifiers: Modifier[];
	bounds?: WidgetBounds;
}

export interface DragEvent {
	widget_id: string;
	x: number;
	y: number;
}

export interface FileConfiguration {
	html: string;
}

export interface LicenceKey {
	licence_key: string;
}

export interface MonitorPosition {
	x: number;
	y: number;
	width: number;
	height: number;
	monitor_index: number;
}

export interface ScrapedData {
	widget_id: string;
	value: string;
	error?: string;
	timestamp: string;
}

export interface UrlConfiguration {
	url: string;
}

export interface UserEmail {
	email: string;
}

export interface Widget {
	id: string;
	name: string;
	description: string;
}

export type WidgetType = 
	| { type: "file", content: FileConfiguration }
	| { type: "url", content: UrlConfiguration };

export interface WidgetConfiguration {
	widget_id: NanoId;
	title: string;
	widget_type: WidgetType;
	level: Level;
	transparent: boolean;
	decorations: boolean;
	is_open: boolean;
	bounds: WidgetBounds;
}

export interface WidgetModifier {
	id: number;
	widget_id: NanoId;
	modifier_type: Modifier;
}

export type ApiAction = 
	| { type: "deletewidget", content: string }
	| { type: "createwidget", content: WidgetConfiguration }
	| { type: "togglewidgetvisibility", content: {
	widget_id: string;
	visible: boolean;
}}
	| { type: "updatewidgetbounds", content: {
	widget_id: string;
	bounds: WidgetBounds;
}}
	| { type: "maximizewidget", content: {
	widget_id: string;
}}
	| { type: "minimizewidget", content: {
	widget_id: string;
}}
	| { type: "deletewidgetmodifier", content: {
	widget_id: string;
	modifier_id: string;
}}
	| { type: "checklicence", content: {
	user_email: string;
	licence_key: string;
}};

export type IpcEvent = 
	| { type: "savesettings", content: AppSettings }
	| { type: "extractresult", content: ScrapedData }
	| { type: "dragevent", content: DragEvent }
	| { type: "buylicence", content: UserEmail }
	| { type: "checklicence", content: CheckLicenceRequest };

